<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/Main.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;import com.opencsv.CSVReader;&#10;import com.opencsv.exceptions.CsvValidationException;&#10;import org.example.model.Employee;&#10;import org.example.model.PayrollCalculator;&#10;import org.example.model.ShiftRecord;&#10;import org.example.model.WageCalculator;&#10;&#10;import java.io.FileReader;&#10;import java.io.IOException;&#10;import java.util.*;&#10;&#10;&#10;public class Main {&#10;    static void main(String[] args) {&#10;        try {&#10;            Map&lt;String, Employee&gt; employeeMap = getEmployeeMap();&#10;&#10;//            for (ShiftRecord r : records) {&#10;//                System.out.println(r.getName() + &quot; worked as &quot; + r.getRole() + &quot; on &quot; + r.getDate());&#10;//            }&#10;//&#10;//            for (String date : shiftsByDate.keySet()) {&#10;//                System.out.println(&quot;Date: &quot; + date);&#10;//&#10;//                for (ShiftRecord r : shiftsByDate.get(date)) {&#10;//                    System.out.println(&quot;  - &quot; + r.getName() + &quot; (&quot; + r.getRole() + &quot;)&quot;);&#10;//                }&#10;//            }&#10;            printEmployeeRecords(employeeMap);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private static Map&lt;String, Employee&gt; getEmployeeMap() throws IOException, CsvValidationException {&#10;        Map&lt;String, List&lt;ShiftRecord&gt;&gt; shiftsByDate = new HashMap&lt;&gt;();&#10;        List&lt;ShiftRecord&gt; records = new ArrayList&lt;&gt;();&#10;        Map&lt;String, Employee&gt; employeeMap = new HashMap&lt;&gt;();&#10;        CSVReader reader = new CSVReader(new FileReader(&quot;data/tips_report.csv&quot;));&#10;&#10;        String[] header = reader.readNext();&#10;        String currentEmployee = null;&#10;&#10;        String[] line;&#10;&#10;        // Parse through the CSV file and breakdown the information accordingly&#10;        while ((line = reader.readNext()) != null) {&#10;            String employee = line[0].trim();&#10;            String role = line[1].trim();&#10;            String date = line[2].trim();&#10;            String timeIn = line[3].trim();&#10;            String timeOut = line[4].trim();&#10;            if (line[5].trim().isEmpty()) {&#10;                line[5] = &quot;0&quot;; // Default to 0 if tips are not provided&#10;            } else {&#10;                line[5] = line[5].replace(&quot;$&quot;, &quot;&quot;); // Remove dollar sign if present&#10;                line[5] = line[5].replace(&quot;,&quot;, &quot;&quot;);&#10;            }&#10;            double tips = Double.parseDouble(line[5].trim());&#10;            if (line[6].trim().isEmpty()) {&#10;                line[6] = &quot;0&quot;; // Default to 0 if sales are not provided&#10;            } else {&#10;                line[6] = line[6].replace(&quot;$&quot;, &quot;&quot;); // Remove dollar sign if present&#10;                line[6] = line[6].replace(&quot;,&quot;, &quot;&quot;);&#10;            }&#10;            double sales = Double.parseDouble(line[6].trim());&#10;&#10;            // Ignores any line that doesn't deal with an employees info&#10;            if (employee.toLowerCase().contains(&quot;total&quot;) || role.equalsIgnoreCase(&quot;N/A&quot;)) {&#10;                continue;&#10;            }&#10;&#10;            // Keeps you on the same employee after a new one has been established for the first time&#10;            if (!employee.isEmpty()) {&#10;                currentEmployee = employee;&#10;                Employee emp = employeeMap.get(employee);&#10;                if (emp == null) {&#10;                    emp = new Employee();&#10;                    emp.setName(employee);&#10;                    employeeMap.put(employee, emp);&#10;                }&#10;            }&#10;&#10;            // Fill out a record for the shift worked&#10;            if (!date.isEmpty() &amp;&amp; currentEmployee != null) {&#10;                ShiftRecord record = new ShiftRecord();&#10;                record.setName(currentEmployee);&#10;                record.setRole(role);&#10;                record.setDate(date);&#10;                record.setTimeIn(timeIn);&#10;                record.setTimeOut(timeOut);&#10;                record.setTips(tips);&#10;                record.setSales(sales);&#10;                double wage = WageCalculator.calculateWage(record.getRole(), record.getHoursWorked());&#10;                record.setWage(wage);&#10;&#10;                records.add(record);&#10;                employeeMap.get(currentEmployee).setShifts(record);&#10;                // Create a new date to hold shifts by date if one doesn't exist&#10;                shiftsByDate.computeIfAbsent(record.getDate(), _ -&gt; new ArrayList&lt;&gt;()).add(record);&#10;            }&#10;&#10;        }&#10;&#10;        // Apply tip-out rules to the collected shifts&#10;        applyTipOuts(shiftsByDate);&#10;&#10;        return employeeMap;&#10;    }&#10;&#10;    // Public helper so tests can run tip-out logic using synthetic shift data&#10;    public static void applyTipOuts(Map&lt;String, List&lt;ShiftRecord&gt;&gt; shiftsByDate) {&#10;        // Loop through all the shifts to determine tipOut and distribute cleanly&#10;        for (Map.Entry&lt;String, List&lt;ShiftRecord&gt;&gt; entry : shiftsByDate.entrySet()) {&#10;            List&lt;ShiftRecord&gt; dayShifts = entry.getValue();&#10;&#10;            int hostCount = 0;&#10;            int bartenderCount = 0;&#10;            for (ShiftRecord shift : dayShifts) {&#10;                if (shift.getRole().equalsIgnoreCase(&quot;Host&quot;)) hostCount++;&#10;                if (shift.getRole().equalsIgnoreCase(&quot;Bartender&quot;)) bartenderCount++;&#10;            }&#10;&#10;            double totalHostTipOutGiven = 0.0;   // tips that should go to hosts&#10;            double totalTipToBartenders = 0.0;   // tips that should go to bartenders (from servers)&#10;&#10;            // First: compute tipOuts and apply them to payers immediately&#10;            for (ShiftRecord shift : dayShifts) {&#10;                String role = shift.getRole();&#10;                if (role.equalsIgnoreCase(&quot;Server&quot;)) {&#10;                    double bartenderTip = shift.getSales() * 0.02; // server -&gt; bartender pool&#10;                    double hostTip = 0.0; // server -&gt; host pool depends on host count&#10;                    if (hostCount == 1) {&#10;                        hostTip = shift.getSales() * 0.01;&#10;                    } else if (hostCount &gt;= 2) {&#10;                        hostTip = shift.getSales() * 0.02;&#10;                    }&#10;                    double totalTipOut = bartenderTip + hostTip;&#10;                    shift.applyTipOut(totalTipOut); // subtract from server's tips and record tipOut&#10;&#10;                    totalHostTipOutGiven += hostTip;&#10;                    totalTipToBartenders += bartenderTip;&#10;                } else if (role.equalsIgnoreCase(&quot;Bartender&quot;)) {&#10;                    // Bartenders tip out a percentage to hosts&#10;                    double hostTip = shift.getSales() * 0.01; // bartender -&gt; hosts&#10;                    shift.applyTipOut(hostTip);&#10;                    totalHostTipOutGiven += hostTip;&#10;                } else {&#10;                    // hosts/managers/non-payers: no immediate tip-out change&#10;                }&#10;            }&#10;&#10;            // Second: distribute host pool equally among hosts who worked that day&#10;            if (hostCount &gt; 0 &amp;&amp; totalHostTipOutGiven &gt; 0.0) {&#10;                double perHostShare = Math.round((totalHostTipOutGiven / hostCount) * 100.0) / 100.0;&#10;                for (ShiftRecord shift : dayShifts) {&#10;                    if (shift.getRole().equalsIgnoreCase(&quot;Host&quot;)) {&#10;                        shift.setTips(Math.round((shift.getTips() + perHostShare) * 100.0) / 100.0);&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Third: distribute server-&gt;bartender pool equally among bartenders who worked that day&#10;            if (bartenderCount &gt; 0 &amp;&amp; totalTipToBartenders &gt; 0.0) {&#10;                double perBartenderShare = Math.round((totalTipToBartenders / bartenderCount) * 100.0) / 100.0;&#10;                for (ShiftRecord shift : dayShifts) {&#10;                    if (shift.getRole().equalsIgnoreCase(&quot;Bartender&quot;)) {&#10;                        shift.setTips(Math.round((shift.getTips() + perBartenderShare) * 100.0) / 100.0);&#10;                    }&#10;                }&#10;            }&#10;&#10;        }&#10;    }&#10;&#10;&#10;    private static void printEmployeeRecords(Map&lt;String, Employee&gt; employeeMap) {&#10;        for (Employee emp : employeeMap.values()) {&#10;            System.out.println(&quot;Employee: &quot; + emp.getName());&#10;            System.out.println(&quot;Total Tips: $&quot; + emp.getTotalTips());&#10;            System.out.println(&quot;Hours Worked: &quot; + emp.getHoursWorked());&#10;            System.out.println(&quot;Wage: $&quot; + PayrollCalculator.calculateTotalWage(emp));&#10;            System.out.println(&quot;Shifts:&quot;);&#10;            for (ShiftRecord shift : emp.getShifts()) {&#10;                System.out.println(&quot;  - &quot; + shift);&#10;            }&#10;            System.out.println();&#10;        }&#10;    }&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import com.opencsv.CSVReader;&#10;import com.opencsv.exceptions.CsvValidationException;&#10;import org.example.model.Employee;&#10;import org.example.model.PayrollCalculator;&#10;import org.example.model.ShiftRecord;&#10;import org.example.model.WageCalculator;&#10;&#10;import java.io.FileReader;&#10;import java.io.IOException;&#10;import java.util.*;&#10;&#10;&#10;public class Main {&#10;    static void main(String[] args) {&#10;        try {&#10;            Map&lt;String, Employee&gt; employeeMap = getEmployeeMap();&#10;            printEmployeeRecords(employeeMap);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public static Map&lt;String, Employee&gt; getEmployeeMap() throws IOException, CsvValidationException {&#10;        Map&lt;String, List&lt;ShiftRecord&gt;&gt; shiftsByDate = new HashMap&lt;&gt;();&#10;        List&lt;ShiftRecord&gt; records = new ArrayList&lt;&gt;();&#10;        Map&lt;String, Employee&gt; employeeMap = new HashMap&lt;&gt;();&#10;        CSVReader reader = new CSVReader(new FileReader(&quot;data/tips_report.csv&quot;));&#10;&#10;        String[] header = reader.readNext();&#10;        String currentEmployee = null;&#10;&#10;        String[] line;&#10;&#10;        // Parse through the CSV file and breakdown the information accordingly&#10;        while ((line = reader.readNext()) != null) {&#10;            String employee = line[0].trim();&#10;            String role = line[1].trim();&#10;            String date = line[2].trim();&#10;            String timeIn = line[3].trim();&#10;            String timeOut = line[4].trim();&#10;            if (line[5].trim().isEmpty()) {&#10;                line[5] = &quot;0&quot;; // Default to 0 if tips are not provided&#10;            } else {&#10;                line[5] = line[5].replace(&quot;$&quot;, &quot;&quot;); // Remove dollar sign if present&#10;                line[5] = line[5].replace(&quot;,&quot;, &quot;&quot;);&#10;            }&#10;            double tips = Double.parseDouble(line[5].trim());&#10;            if (line[6].trim().isEmpty()) {&#10;                line[6] = &quot;0&quot;; // Default to 0 if sales are not provided&#10;            } else {&#10;                line[6] = line[6].replace(&quot;$&quot;, &quot;&quot;); // Remove dollar sign if present&#10;                line[6] = line[6].replace(&quot;,&quot;, &quot;&quot;);&#10;            }&#10;            double sales = Double.parseDouble(line[6].trim());&#10;&#10;            // Ignores any line that doesn't deal with an employees info&#10;            if (employee.toLowerCase().contains(&quot;total&quot;) || role.equalsIgnoreCase(&quot;N/A&quot;)) {&#10;                continue;&#10;            }&#10;&#10;            // Keeps you on the same employee after a new one has been established for the first time&#10;            if (!employee.isEmpty()) {&#10;                currentEmployee = employee;&#10;                Employee emp = employeeMap.get(employee);&#10;                if (emp == null) {&#10;                    emp = new Employee();&#10;                    emp.setName(employee);&#10;                    employeeMap.put(employee, emp);&#10;                }&#10;            }&#10;&#10;            // Fill out a record for the shift worked&#10;            if (!date.isEmpty() &amp;&amp; currentEmployee != null) {&#10;                ShiftRecord record = new ShiftRecord();&#10;                record.setName(currentEmployee);&#10;                record.setRole(role);&#10;                record.setDate(date);&#10;                record.setTimeIn(timeIn);&#10;                record.setTimeOut(timeOut);&#10;                record.setTips(tips);&#10;                record.setSales(sales);&#10;                double wage = WageCalculator.calculateWage(record.getRole(), record.getHoursWorked());&#10;                record.setWage(wage);&#10;&#10;                records.add(record);&#10;                employeeMap.get(currentEmployee).setShifts(record);&#10;                // Create a new date to hold shifts by date if one doesn't exist&#10;                shiftsByDate.computeIfAbsent(record.getDate(), _ -&gt; new ArrayList&lt;&gt;()).add(record);&#10;            }&#10;&#10;        }&#10;&#10;        // Apply tip-out rules to the collected shifts&#10;        applyTipOuts(shiftsByDate);&#10;&#10;        return employeeMap;&#10;    }&#10;&#10;    // Public helper so tests can run tip-out logic using synthetic shift data&#10;    public static void applyTipOuts(Map&lt;String, List&lt;ShiftRecord&gt;&gt; shiftsByDate) {&#10;        // Loop through all the shifts to determine tipOut and distribute cleanly&#10;        for (Map.Entry&lt;String, List&lt;ShiftRecord&gt;&gt; entry : shiftsByDate.entrySet()) {&#10;            List&lt;ShiftRecord&gt; dayShifts = entry.getValue();&#10;&#10;            int hostCount = 0;&#10;            int bartenderCount = 0;&#10;            for (ShiftRecord shift : dayShifts) {&#10;                if (shift.getRole().equalsIgnoreCase(&quot;Host&quot;)) hostCount++;&#10;                if (shift.getRole().equalsIgnoreCase(&quot;Bartender&quot;)) bartenderCount++;&#10;            }&#10;&#10;            double totalHostTipOutGiven = 0.0;   // tips that should go to hosts&#10;            double totalTipToBartenders = 0.0;   // tips that should go to bartenders (from servers)&#10;&#10;            // First: compute tipOuts and apply them to payers immediately&#10;            for (ShiftRecord shift : dayShifts) {&#10;                String role = shift.getRole();&#10;                if (role.equalsIgnoreCase(&quot;Server&quot;)) {&#10;                    double bartenderTip = shift.getSales() * 0.02; // server -&gt; bartender pool&#10;                    double hostTip = 0.0; // server -&gt; host pool depends on host count&#10;                    if (hostCount == 1) {&#10;                        hostTip = shift.getSales() * 0.01;&#10;                    } else if (hostCount &gt;= 2) {&#10;                        hostTip = shift.getSales() * 0.02;&#10;                    }&#10;                    double totalTipOut = bartenderTip + hostTip;&#10;                    shift.applyTipOut(totalTipOut); // subtract from server's tips and record tipOut&#10;&#10;                    totalHostTipOutGiven += hostTip;&#10;                    totalTipToBartenders += bartenderTip;&#10;                } else if (role.equalsIgnoreCase(&quot;Bartender&quot;)) {&#10;                    // Bartenders tip out a percentage to hosts&#10;                    double hostTip = shift.getSales() * 0.01; // bartender -&gt; hosts&#10;                    shift.applyTipOut(hostTip);&#10;                    totalHostTipOutGiven += hostTip;&#10;                } else {&#10;                    // hosts/managers/non-payers: no immediate tip-out change&#10;                }&#10;            }&#10;&#10;            // Second: distribute host pool equally among hosts who worked that day&#10;            if (hostCount &gt; 0 &amp;&amp; totalHostTipOutGiven &gt; 0.0) {&#10;                double perHostShare = Math.round((totalHostTipOutGiven / hostCount) * 100.0) / 100.0;&#10;                for (ShiftRecord shift : dayShifts) {&#10;                    if (shift.getRole().equalsIgnoreCase(&quot;Host&quot;)) {&#10;                        shift.setTips(Math.round((shift.getTips() + perHostShare) * 100.0) / 100.0);&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Third: distribute server-&gt;bartender pool equally among bartenders who worked that day&#10;            if (bartenderCount &gt; 0 &amp;&amp; totalTipToBartenders &gt; 0.0) {&#10;                double perBartenderShare = Math.round((totalTipToBartenders / bartenderCount) * 100.0) / 100.0;&#10;                for (ShiftRecord shift : dayShifts) {&#10;                    if (shift.getRole().equalsIgnoreCase(&quot;Bartender&quot;)) {&#10;                        shift.setTips(Math.round((shift.getTips() + perBartenderShare) * 100.0) / 100.0);&#10;                    }&#10;                }&#10;            }&#10;&#10;        }&#10;    }&#10;&#10;&#10;    private static void printEmployeeRecords(Map&lt;String, Employee&gt; employeeMap) {&#10;        for (Employee emp : employeeMap.values()) {&#10;            System.out.println(&quot;Employee: &quot; + emp.getName());&#10;            System.out.println(&quot;Total Tips: $&quot; + emp.getTotalTips());&#10;            System.out.println(&quot;Hours Worked: &quot; + emp.getHoursWorked());&#10;            System.out.println(&quot;Wage: $&quot; + PayrollCalculator.calculateTotalWage(emp));&#10;            System.out.println(&quot;Shifts:&quot;);&#10;            for (ShiftRecord shift : emp.getShifts()) {&#10;                System.out.println(&quot;  - &quot; + shift);&#10;            }&#10;            System.out.println();&#10;        }&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>